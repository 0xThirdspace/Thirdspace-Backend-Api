generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  name                 String        @db.VarChar(255)
  email                String        @unique
  password             String
  profileImage         String?       @default("user.png")
  workspace            Workspace?
  createdBounties      Bounty[]      @relation("CreatedByUser")
  createdTasks         Tasks[]       @relation("TaskCreatedByUser")
  participatedBounties Bounty[]      @relation("Participant")
  Team                 Team[]
  taskAssignees        Tasks[]       @relation("Assignees")
  kenbanBoard          KenbanBoard[]
  Message              Message[]

  @@map(name: "users")
}

model Workspace {
  id             String        @id @default(uuid())
  workspace_name String        @unique
  imageUrl       String?       @default("workspace.png")
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id])
  bounties       Bounty[]
  KenbanBoard    KenbanBoard[]
  team           Team[]

  @@map(name: "workspaces")
}

model Team {
  id          String     @id @default(uuid())
  email       String
  role        Role
  department  Department
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User       @relation(fields: [userId], references: [id])
  userId      String

  @@unique([workspaceId, userId], name: "team_unique")
  @@map(name: "teams")
}

model Bounty {
  id                 String    @id @default(uuid())
  title              String    @unique @db.VarChar(255)
  repo_link          String
  amount             Float
  start_date         DateTime
  end_date           DateTime
  bounty_description String    @db.VarChar(255)
  workspaceId        String
  userId             String
  createdByUser      User      @relation("CreatedByUser", fields: [userId], references: [id])
  workspace          Workspace @relation(fields: [workspaceId], references: [id])
  participants       User[]    @relation("Participant")
  status             Status    @default(pending)

  @@index([title], name: "title_index")
  @@map(name: "bounties")
}

model KenbanBoard {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  tasks       Tasks[]
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String

  @@map(name: "kenbanboard")
}

model Tasks {
  id            String      @id @default(uuid())
  title         String      @db.VarChar(255)
  description   String      @db.VarChar(255)
  attachments   String?     @default("attachment.png")
  due_date      DateTime
  Assignees     User[]      @relation("Assignees")
  status        TaskStatus  @default(todo)
  KenbanId      String
  KenbanBoard   KenbanBoard @relation(fields: [KenbanId], references: [id])
  userId        String
  createdByUser User        @relation("TaskCreatedByUser", fields: [userId], references: [id])

  @@map(name: "tasks")
}

model Chat {
  id        String    @id @default(uuid())
  members   String[]
  timestamp DateTime  @default(now())  
  Message   Message[]

  @@map(name: "chats")
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  text      String
  imageUrl  String?
  timestamp DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@map(name: "messages")
}

enum Status {
  pending
  active
  closed
}

enum Department {
  management
  marketing
  engineering
  product
  research
  finance
  sales
  operations
  human_resource
  other
}

enum Role {
  owner
  admin
  member
}

enum TaskStatus {
  todo
  inProgress
  Done
}
